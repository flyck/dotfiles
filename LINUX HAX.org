#+TITLE:  Linux Hax
#+AUTHOR: Felix Brilej
#+Options: toc:nil html-postamble:nil
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="styles/base.css" />


* THE GOLDEN RULES
  :Properties:
  :VISIBILITY: children
  :End:
  - Check your firewall
  - Do you use sudo and therefor have different runtime variables (or a different environment)?
    This couldn't be confirmed by my colleagues :/
  - Check the logfile file permissions if no log-messages show up

* Oracle Linux
  In Oracle Linux most of the host-related config can be changed in =/etc/sysconfig/=

** Change the hostname
   Edit the following files:
   - /etc/sysconfig/network
   - /etc/hosts

** Change keyboard layout
   Change suspicious-looking entries in /etc/sysconfig/keyboard from "en" into “de”

* Ubuntu
  _Hint for the desktop:_
  - Move windows: control-windows arrow

** Change hostname                                            :Ubuntu:
   Change these files:
   - /etc/hosts (fqdn, then shorthostname, seperated via tab)
   - /etc/hostname (short hostname)

** chkconfig (autostart configuration)                        :Ubuntu:
   #+BEGIN_SRC sh
   #equivalents to these:
   chkconfig --add <service> chkconfig --level 345 <service> on
   chkconfig --del <service>
   #are:
   update-rc.d <service> defaults update-rc.d <service> start 20 3 4 5
   update-rc.d -f <service> remove
   #+END_SRC

** Gnome Terminal
   The other options can be easily changed in the terminal, but the tab shifting needs to be
   configured like so:
#+begin_src sh
gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ next-tab '<Primary>Tab'
gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ prev-tab '<Primary><Shift>Tab'
#+end_src

* Icinga Monitoring
  Nrpe Tipps:
  - https://docs.icinga.com/latest/de/nrpe.html#icingaserverdefinitions

** Check multiple disks in one service
   This assumes an nrpe setup is already at place and only this check has to be added.
   It also requires the file check_multi at ~/usr/lib64/nagios/plugins/~ with execute permissions.
   - Download it here: https://github.com/flackem/check_multi (?)

   #+BEGIN_SRC sh
# check if multiple disks are attached at all
df -h # df -l if df -h doesnt respond
# check if check_multi config file exists
cat /etc/nagios/check_multi_disk.cmd
# make sure this exists in /etc/nagios/nrpe.cfg:
command[check_disk]=/usr/lib64/nagios/plugins/check_multi -f /etc/nagios/check_multi_disk.cmd -r 32
# check the command locally:
/usr/lib64/nagios/plugins/check_nrpe -H localhost -c check_disk
/usr/lib64/nagios/plugins/check_nrpe -H 127.0.0.1 -c check_disk #alternative for ssl handshake error
   #+END_SRC

   Example content of /etc/nagios/check_multi_disk.cmd
   #+BEGIN_SRC sh
command[disk1]=/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -p /
command[disk2]=/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -p /home
command[disk3]=/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -p /boot
   #+END_SRC

   What to check? Basically everything that starts with /dev:
   #+BEGIN_SRC sh
[root@somehost-blade1 ~]# df -h | grep ^/dev
/dev/mapper/ol_somehost--blade1-root   50G  6.9G   44G  14% /
/dev/mapper/ol_nhhbc015--blade1-home  225G   94M  225G   1% /home
/dev/sda1                             497M  168M  330M  34% /boot
   #+END_SRC

** Debugging tips
   Get more information on config reload errors:
   #+BEGIN_SRC sh
   /usr/lib/icinga2/safe-reload /etc/sysconfig/icinga2
   #+END_SRC

** Basic nrpe setup ontop of xinetd
*** Setup on monitoring-server
    Required for the localhost template to work that comes with the icinga installation
    #+BEGIN_SRC sh
yum install nagios-plugins-all
    #+END_SRC

    In order to trigger remote nagios-plugins this package is necessary
    #+BEGIN_SRC sh
yum install nagios-plugins-nrpe
    #+END_SRC

*** Setup on each client
    Install these packages. Nagios-plugins-all is an overkill, but it is really small so its okay.
    #+BEGIN_SRC sh :results silent
yum install -y nrpe nagios-plugins-nrpe nagios-plugins-all xinetd
    #+END_SRC

    ~/etc/xinetd.d/nrpe~ has to exist in a specific way:
    #+BEGIN_SRC sh
cat << EOF > /etc/xinetd.d/nrpe
# default: off
# description: NRPE (Nagios Remote Plugin Executor)
service nrpe
{
        flags           = REUSE
        socket_type     = stream
        type            = UNLISTED
        port            = 5666
        wait            = no
        user            = nagios
        group           = nagios
        server          = /usr/sbin/nrpe
        server_args     = -c /etc/nagios/nrpe.cfg --inetd
        log_on_failure  += USERID
        disable         = no
        only_from       = 127.0.0.1 monitoring-server
}
EOF
    #+END_SRC

    Restarting xinetd is required
    #+BEGIN_SRC sh :results drawer
chkconfig xinetd on
service xinetd restart
    #+END_SRC

    Check if the setup works locally
    #+BEGIN_SRC sh
/usr/lib64/nagios/plugins/check_nrpe -H localhost -c check_disk
/usr/lib64/nagios/plugins/check_nrpe -H 127.0.0.1 -c check_disk #alternative for ssl handshake error
    #+END_SRC

**** Add iptables exception
     If a connection using telnet on port 22 is possible, but port 5666 shows "no route to host"
     the reason is probably an iptables-rule.

     Check current Iptables rules:
     #+BEGIN_SRC sh
     iptables --list
     #+END_SRC

     Works on Centos 7:
     #+BEGIN_SRC sh
     iptables -A INPUT -s monitoring-server -p tcp -m tcp --dport 5666 -m state --state NEW,ESTABLISHED -j ACCEPT
     yum install iptables-services
     service iptables reload
     #+END_SRC

* SQLite
  There are a few steps to see the tables in an SQLite database:

  Connect to the db
  #+BEGIN_SRC sh
sqlite3 grafana.db # assumes grafana.db exists in current directory
  #+END_SRC

  Query the db
  #+BEGIN_SRC sh
# List the tables in your database:
.tables

# List how the table looks:
.schema tablename

# Print the entire table:
SELECT * FROM tablename;

# List all of the available SQLite prompt commands:
.help

# Close sqlite
.exit
  #+END_SRC

* MySQL
   What to do when you cant start mysql as root (maybe not exactly right)
   #+BEGIN_SRC sh
   service mysqld stop
   /usr/bin/mysqld start --skip-grant-tables -user=root
   # mysqld_safe --skip-grant-tables & # alternatively
   mysql -u root
   # mysql # alternatively
   UPDATE mysql.user SET Password=PASSWORD('newpwd') WHERE User='root';
   FLUSH PRIVILEGES;
   #+END_SRC

   What to do when your mysql wont start generally
   #+BEGIN_SRC sh
   service mysqld stop
   mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak
   service mysqld start
   #+END_SRC

   Overall important commands
   #+BEGIN_SRC sql
   mysqladmin -u root -p'abc' password '123456' --change root password
   show databases;
   use testdatabase; --enables you to query the selected database
   show tables;
   describe testtable; --show available columns / attributes
   select * from testtable where id=1\G --display columns nicely; for tables with many columns
   #+END_SRC

** Mysql 5.7.5 or lower
   #+BEGIN_SRC sql
   SET PASSWORD FOR 'user-name-here'@'hostname' = PASSWORD('new-password');
   #+END_SRC

* Oracle Enterprise Linux OREL

** Add Epel repository
   #+BEGIN_SRC sh
   yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
   yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm
   #+END_SRC

   Then check whether it's enabled
   #+BEGIN_SRC sh
   yum repolist
   #+END_SRC

** Free up disk-space
   Source: https://uhesse.com/2011/06/01/adrci-a-survival-guide-for-the-dba/

   #+BEGIN_SRC sh
[oracle@uhesse ~]$ adrci

ADRCI: Release 11.2.0.2.0 - Production on Wed Jun 1 10:20:08 2011

Copyright (c) 1982, 2009, Oracle and/or its affiliates.  All rights reserved.

ADR base = "/u01/app/oracle"
adrci> show home
ADR Homes:
diag/tnslsnr/uhesse/listener
diag/rdbms/orcl/orcl
adrci> set homepath <insert one of the ADR homes>
adrci> purge -age 2880 -type trace
adrci> show tracefile -rt
   #+END_SRC

* Package management
  _Differences in software architectures:_
  - x86-64: Initial description for 64-bit architecture
  - amd64 : x86-64 for amd or intel processors (basically just a new name for the same thing)
  - i386  : 32 bit architecture

** RPM
   Some usefull hacks
   #+BEGIN_SRC sh
#Check whether a folder belongs to a package
rpm -q -whatprovides /etc/profile
#List all installed packages
rpm -qa | less
#Search for a specific package
rpm -qa | grep -i name
#Uninstall a package
rpm -e name
#Update a package with a new rpm in the current directory
rpm -U local_upgrade.rpm
   #+END_SRC

** Apt

*** Hold back packages, to prevent updates
    For me this was useful to prevent apt from overwriting my self-compiled git.
    #+BEGIN_SRC sh
    sudo apt-mark hold <package>
    sudo apt-mark showhold
    #+END_SRC

*** /boot Partition full
    fire this up multiple times
    #+BEGIN_SRC sh
   sudo apt-get autoremove
    #+END_SRC

** Yum

*** Add a repository to yum
    For CentOS and Red Hat Enterprise Linux 6.x:
    #+BEGIN_SRC sh
# Centos extras repository (contains for example nrpe checks)
sudo wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm
sudo rpm -Uvh epel-release-latest-6*.rpm
# RHEL/CentOS 6 32-Bit
wget http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
rpm -ivh epel-release-6-8.noarch.rpm
# RHEL/CentOS 6 64-Bit
wget http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
rpm -ivh epel-release-6-8.noarch.rpm
    #+END_SRC

    Alternatively you can just grab the .repo configration file
    #+BEGIN_SRC sh
# For Oracle Linux 6.x:
cd /etc/yum.repos.d/
wget http://public-yum.oracle.com/public-yum-ol6.repo
    #+END_SRC

    If this shows: "Error: Cannot retrieve metalink for repository: epel. Please verify its path and try again"
    Maybe it is because of old certificates. An alternative would be to use repositorise with only
    http and not https. However, sticking with https, try:
    #+BEGIN_SRC sh
   yum --disablerepo=epel -y update  ca-certificates
    #+END_SRC

*** Only download packages via yum
    #+BEGIN_SRC sh
    yum install yum-downloadonly
    yum install --downloadonly --downloaddir=<directory> <package>
    #+END_SRC

* Proxy settings
   Proxy for cpan
   #+BEGIN_SRC sh
   perl -MCPAN -e shell
   o conf init /proxy/
   http://172.16.8.250:3128
   o conf commit
   exit
   #+END_SRC

   Proxy for git
   #+BEGIN_SRC sh
   git config --global http.proxy http://172.16.8.250:3128; git config --global https.proxy  http://172.16.8.250:3128
   git config --global --unset http.proxy; git config --global --unset https.proxy
   #+END_SRC

   Proxy for bash
   #+BEGIN_SRC sh
   #Just add the following to the end of you bashrc:
   export http_proxy=http://172.16.8.250:3128 && export https_proxy=http://172.16.8.250:3128 && export ftp_proxy=http://172.16.8.250:3128
   #Unset them:
   export http_proxy= && export https_proxy= && export ftp_proxy=
   #+END_SRC

* Git
** Cleanup
#+begin_src sh
#cleanup all branches which were merged
git branch --merged | egrep -v "(^\*|master|main|dev)" | xargs git branch -d

# remove remote tracking branches
git remote prune origin
#+end_src
** Author fix
Here's how to do it with rebase and keep both the commit date and the author date:

#+begin_src sh
git -c rebase.instructionFormat='%s%nexec GIT_COMMITTER_DATE="%cD" GIT_AUTHOR_DATE="%aD" git commit --amend --no-edit --reset-author' rebase -f <commit/branch before wrong author and email, or --root to rebase all>
#+end_src

** Manual installation
   Git 2.x Installation on Linux (taken from here: https://oracle-base.com/articles/linux/git-2-installation-on-linux)

   The version of Git available from the Yum repositories is
   typically quite old. This article describes the manual installation of Git 2.x on Linux. The
   same method should work for all the RHEL clones (Oracle Linux, CentOS) and Fedora.

   Install the prerequisite packages and remove the any current Git installation.
   #+BEGIN_SRC sh
yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel -y
yum install gcc perl-ExtUtils-MakeMaker -y
yum remove git -y
   #+END_SRC

   Download the latest Git installation from kernel.org and unpack it.
   #+BEGIN_SRC sh
cd /usr/src
wget https://www.kernel.org/pub/software/scm/git/git-2.2.2.tar.gz
tar xzf git-2.2.2.tar.gz
   #+END_SRC

   Install it.
   #+BEGIN_SRC sh
cd git-2.2.2
make prefix=/usr/local/git all
make prefix=/usr/local/git install
echo "export PATH=$PATH:/usr/local/git/bin" >> /etc/bashrc
source /etc/bashrc

   #+END_SRC

   Test it, by checking the version.
   #+BEGIN_SRC sh
git --version
   #+END_SRC

** Initial Settings
   Set General information required by git
   #+BEGIN_SRC sh
   git config --global user.name "username"
   git config --global user.email mailaddress
   git config --global core.autocrlf false #Leave all line-ending business to the user
   #+END_SRC

   Show general information required by git
   #+BEGIN_SRC sh
   git config user.name
   git config user.email
   git config http.proxy
   #+END_SRC

   Fixes this error: "Local SSL issuer certificate error"
   - Alternatively i could just install that ssl certificate, probably the more advanced solution
   #+BEGIN_SRC sh
   git config --global http.sslVerify false
   #+END_SRC

   Install ssh key
   #+BEGIN_SRC sh
   # check if ssh-agent is running
   ps -e | grep [s]sh-agent
   # start the ssh-agent if it's not running
   ssh-agent /bin/bash
   # Unlock the ssh key
   ssh-add ~/.ssh/id_rsa
   #+END_SRC

** Undo last commit
   #+BEGIN_SRC sh
   git commit ....  git reset --soft HEAD~1
   # edit files as needed
   git add ...  git commit -c ORIG_HEAD
   #+END_SRC

   if your commit is total crap:
   #+BEGIN_SRC sh
   git reset --hard HEAD~1
   #+END_SRC

** Clone Subdir
   Suppose your project is in a directory called "project", and you want only those commits which touch project/dirB.
   #+BEGIN_SRC sh
   git clone project/ subproject/
   cd subproject
   git filter-branch --prune-empty --subdirectory-filter dirB HEAD
   #+END_SRC
   The subproject will now contain the git history which touches dirB.

** Show tags and their type
   Taken from:
   https://stackoverflow.com/questions/40479712/how-can-i-tell-if-a-given-git-tag-is-annotated-or-lightweight/40480534
   #+BEGIN_SRC sh
git show-ref -d --tags       |
cut -b 42-                   | # to remove the commit-id
sort                         |
sed 's/\^{}//'               | # remove ^{} markings
uniq -c                      | # count identical lines
sed 's/2\ refs\/tags\// a /' | # 2 identicals = annotated
sed 's/1\ refs\/tags\//lw /'
   #+END_SRC

** Remote branches vs local branches
   https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches

   A command which gets me out of "detached HEAD" error message and properly connects local and
   remote branch:
   #+BEGIN_SRC sh
git checkout -b my-crazy-feature origin/feature/my-crazy-feature
   #+END_SRC


   How to fetch all remote branches:
   #+BEGIN_SRC sh
git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
git fetch --all --tags
git pull --all
   #+END_SRC

** Fix: Local SSL issuer certificate error
   Alternative: install that ssl certificate, probably the more advanced solution
   #+BEGIN_SRC sh
   git config --global http.sslVerify false
   #+END_SRC

** Fix: GNU TLS Error on clone
   :PROPERTIES:
   :dir:      /sshx:root@192.168.192.204:
   :END:
   The error message:
   #+BEGIN_SRC sh
     # happens after installing git using the normal ubuntu repositories
     apt-get install git
     git clone https://tfs.somesite.com
     error: gnutls_handshake() failed: A TLS packet with unexpected length was received. while accessing https://tfs.somesite.com
   #+END_SRC

   #+BEGIN_SRC sh :results drawer
     sudo apt-get remove git
     sudo apt-get install dpkg-dev
     # download everything to get ready to compile
     mkdir ~/git-openssl
     cd ~/git-openssl
     sudo apt-get source git
     sudo apt-get build-dep git
     sudo apt-get install libcurl4-openssl-dev
     sudo dpkg-source -x git_1.7.9.5-1.dsc
     cd git_1.7.9.5
     vim debian/control # replace all instances of “libcurl4-gnutls-dev” with “libcurl4-openssl-dev” (I used sudo vim debian/control) using vim: :%s/libcurl4-gnutls-dev/libcurl4-openssl-dev/gc
     sudo dpkg-buildpackage -rfakeroot -uc -b
     # if it's faling on test, you can remove the line TEST=test from the file debian/rules (I used sudo vim debian/rules to edit the file)
     sudo dpkg -i ../git_1.7.9.5-1_amd64.deb
     sudo apt-mark hold git # makes it so git doesn't get overwritten by updates
   #+END_SRC

* Mailing
** Fetchmail
   _Show certificate-chain_
   openssl s_client -connect pop.gmx.net:995 -showcerts
   - the shown certificat has to copied to a .pem file from BEGIN to END
   - next the program "c_rehash" has to be executed in that directory
     #+BEGIN_SRC sh
     c_rehash .
     #+END_SRC
   - in case the parent directory is registered as "sslcertpath" the certificate error is now
     resolved
     #+BEGIN_SRC sh
     ssl sslcertck sslcertpath /home/rtracker/.fetchmail/certs
     #+END_SRC

   _Alternative for Ubuntu_
   This is knowledge I gained from a whole lot of debugging, I'm not exactly sure about this one
   - Also add the CA as certifcate
   - When testing the openssl directly add the CA as a ca-cert file
   #+BEGIN_SRC sh
   sudo cp /usr/share/ca-certificates/outlook.dc.somesite.com.crt /usr/local/share/ca-certificates/
   sudo update-ca-certificates
   openssl s_client -CAfile ~/.fetchmail/certs/somesite.hh.pem -connect 10.120.20.218:995 -showcerts
   #+END_SRC

   _Convert a .cer into a .pem file_
   #+BEGIN_SRC sh
   openssl x509 -inform der -in certificate.cer -out certificate.pem
   #+END_SRC

* Perl
  List all of a modules dependencies with just a one liner.

  Requires that Devel::Modlist is installed.

  #+BEGIN_SRC sh
  perl -d -MDevel::Modlist=nocore script.pl
  #+END_SRC

* SSH
** Realize password-less login via ssh-key from one to another system
   1) ssh root@alpha
      1) enter password
   2) ssh-keygen -t rsa -P '' -f ~/.ssh/id_dsa
   3) ssh-copy-id -i ~/.ssh/id_dsa.pub root@omega
   4) ssh root@omega (for testing)

   Enable / Disable remote root access
   #+BEGIN_SRC sh
   #Set a root password
   sudo passwd root
   #Reverting that back:
   sudo passwd -l root
   #+END_SRC

   Allow remote root login:
   in /etc/ssh/sshd_config: # PermitRootLogin yes
   service ssh reload

** mpssh
   Execute one and the same bash-command on multiple systems
   #+BEGIN_SRC sh
   mpssh -f ~/banks.txt -v "uptime"
   #+END_SRC

* Firewall
** Selinux
   Some quick commands:
   #+BEGIN_SRC sh
   # check information comming from selinux:
   tail /var/log/audit/audit.log
   # audit2allow tool is part of the following package (turns audit logs to allow-policies):
   yum install setroubleshoot
   # increase loglevel:
   semodule -DB
   #+END_SRC

* vSphere
** Increase VM disk-space
   1) Delete snapshots (need permission of people in charge for this)
   2) Using the vsphere interface, add a harddisk-device to the system
   3) Identify the new harddisk (a reboot might be required)
      #+BEGIN_SRC sh
      fdisk -l
      # The disk that doesnt have a valid partition table is the one we just added
      #+END_SRC
      - SCSI bus might need to be rescanned, therefor do the following:
        #+BEGIN_SRC sh
        echo "- - -" > /sys/class/scsi_host/hostX/scan #do this for all hosts in hopes to find the correct one
        #+END_SRC
   4) Format the identified disk (optional, disk partition is not necessary for data-only disks)
      #+BEGIN_SRC sh
      fdisk /dev/identified_disk
      #+END_SRC
      what follows is an interactive dialog
      - "n" for "new Partition"
      - "p" for "primary partition"
      - "1" for partition number, since so far we dont have any partition number on this disk
      - first cylinder: "enter"
      - last cylinder: "enter"
      - "t" to change the partitinos system ID, in this case "1" will be set automatically
      - Hex Code: 8e for Linux LVM
      - "w" to write the changes and exit
      - *Alternatively* you can also use cfdisk, for me cfdisk was able to create a proper partition
        while fdisk couldnt
   5) Check on those changes by firing um fdisk again
      #+BEGIN_SRC sh
      fdisk -l
      #+END_SRC
   6) Add the newly created disk to the volumegroup
      - pvcreate <disk>
      - vgdisplay
      - vgextend <volumegroup> <disk>
      - pvscan
   7) Add the added space to the volumepath
      - Extend the volumepath
        #+BEGIN_SRC sh
        lvdisplay
        lvextend <volumepath> <disk>
        # alternatively:
        lvextend -l +100%FREE -n <volumepath>
        #+END_SRC
   8) Extend the filesystem. For extX file systems fire up the following:
      #+BEGIN_SRC sh
      resize2fs <volumepath>
      #+END_SRC

** Eth0 configuration after vmware clone
   vim /etc/udev/rules.d/70-persistent-net.rules
   be carefull when more than one adapter is present. otherwise:
   delete the first block and change the last word in the second block to from eth1 eth0

* Basics
  Handy tool to analyze full disks: ncdu
** /bin/bash
*** ls
    Only display the filesize and filename
    #+BEGIN_SRC sh
    ls -lh | awk '{print $5 "\t" $9}'
    #+END_SRC

*** Bash colortable
    Black       0;30     Dark Gray     1;30
    Blue        0;34     Light Blue    1;34
    Green       0;32     Light Green   1;32
    Cyan        0;36     Light Cyan    1;36
    Red         0;31     Light Red     1;31
    Purple      0;35     Light Purple  1;35
    Brown       0;33     Yellow        1;33
    Light Gray  0;37     White         1;37

*** Colorful motd (in red)
    In ubuntu other motds may come from ~/etc/update-motd/~
    #+BEGIN_SRC sh
    echo -en "\033[1;34m" > /etc/motd
    echo "Text of your motd file....." >> /etc/motd
    echo -en "\033[0m" >> /etc/motd
    #+END_SRC

*** Change bash prompt expression
    Put one of the following settings in ~/.bashrc
    #+BEGIN_SRC sh
    # yellow (for non-root users)
    export PS1='\[\033[33m\]\u@\H:\w \[\033[m\]'
    # red (for root)
    export PS1='\[\033[1;31m\]\u@\H:\w \[\033[m\]'
    #+END_SRC

    More good examples
    - https://www.cyberciti.biz/faq/bash-shell-change-the-color-of-my-shell-prompt-under-linux-or-unix/

*** Open process in background
    There are multiple solutions for this, it might be interesting looking into this indepth
    #+BEGIN_SRC sh
    firefox & disown
    firefox &
    firefox #now press C-z
    #+END_SRC

** Change a network config safely
   Use the "at"-tool to reset the config after 5 minutes (at-jobs).
   Useful for ipconfig or firewall config-changes to ensure connectivity.

** Change the timezone
   #+BEGIN_SRC sh
   cp /usr/share/zoneinfo/Europe/Berlin /etc/localtime
   #+END_SRC

** Check the privileges or permissions of a user
   List the privileges like this:
   #+BEGIN_SRC sh
sudo -l -U myuser
   #+END_SRC

   How to read the syntax: http://toroid.org/sudoers-syntax

** Copy files between systems (rsync)
   more useful examples: http://www.tecmint.com/rsync-local-remote-file-synchronization-commands/

   #+BEGIN_SRC sh
   rsync -avz source root@192.168.0.1:/destination/
   #+END_SRC

** Good ASCII Art generators
   - http://my.asciiart.club/

** Cronjobs
   Warning! Cronjobs may restart every minute and as a side effect send report-mails if an error occurs.

   Sample cronjob:
   #+BEGIN_SRC sh
   59 23 * * * /home/john/bin/backup.sh > /home/john/logs/backup.log 2>&1
   #+END_SRC

** Process substitution
   The normal way:
   #+BEGIN_SRC sh
   curl http://somesite/file1 > file1
   curl http://somesite/file2 > file2
   diff file1 file2
   #+END_SRC

   Using process substitution we can have this way faster:
   #+BEGIN_SRC sh
   diff <(curl http://somesite/file1) <(curl http://somesite/file2)
   #+END_SRC

   Process substitution gives you similar capabilities to piping. Except piping only allows you to
   pipe the output from a single command into another. In the diff scenario, we need to pipe the
   output from mutltiple commands into another. And that's what process substitution allows us to
   do.

** Filter a log-file for errors / warnings
   #+BEGIN_SRC sh
   grep -iE "(warning|error|critical)" /var/log/fetchmail.log
   # -i flag to ignore the case
   # -E flag to enable regular expressions
   #+END_SRC

** Find out Mac-Address for a different System
   Prerequesite: Have another system in the same subnet (we call it System A)
   #+BEGIN_SRC sh
#From system A
arp -a
nhhrvl038 (10.120.38.254) at 00:24:a8:68:c3:00 [ether] on eth0
#Ping them once from System A
ping system_b_IP
#Again from system A
arp -a
nhhrvl038 (10.120.38.254) at 00:24:a8:68:c3:00 [ether] on eth0
? (system_b_IP) at 00:0c:29:46:b5:55 [ether] on eth0
   #+END_SRC

** find, grep or sed goodies
   #+BEGIN_SRC sh
   find -type f -exec sed -i -e 's/sqlplus/sqlplus64/g' {} \;
   #search for string in current directory
   grep -R 'string' dir/
   # fill in a specific configuration:
   sudo -E sed -i -e "s/password_secret =.*/password_secret = $(pwgen -s 128 1)/" /etc/graylog/server/server.conf
   #+END_SRC

** Install cpan modules with dependencies
   #+BEGIN_SRC sh
   perl -MCPAN -e 'my $c = "CPAN::HandleConfig";
   $c->load(doit => 1, autoconfig => 1);
   $c->edit(prerequisites_policy => "follow"); $c->edit(build_requires_install_policy => "yes");
   $c->commit'
   #+END_SRC

** Logrotate
   Example from AGerler:
   #+BEGIN_SRC sh
   cat /etc/logrotate.d/fetchmail
   /var/log/fetchmail.log {

   weekly
   create 0644 rtracker adm
   rotate 4
   compress

   delaycompress
   }
   #+END_SRC
   - weekly: time interval
   - create: chmod parameter, owner und group
   - rotate: Amount of "rotates" a logfile persists before it gets deleted
   - compress: whether the log file should be zipped or not
   - delaycompress: the log only gets zipped after the rotation has been completed (file-handle reasons)

** Shrink a logfile
   Reduce a logfile to its last 200 lines while preserving the access rights.
   #+BEGIN_SRC sh
   logfile="/path/to/logfile"; echo "$(tail -n 200 $logfile)" > $logfile
   #+END_SRC

** Mount a cd
   #+BEGIN_SRC sh
   mount -t iso9660 /dev/scd0 /media/cdrom/
   #+END_SRC

** Port Analysis
   Look at opened ports:
   #+BEGIN_SRC sh
   netstat -tulpen
   #+END_SRC

   Look at the processes behind them (actually active ports):
   #+BEGIN_SRC sh
   # Use a grep filter here because you will be getting way too much info
   netstat -tapen | grep
   #+END_SRC

** Rename filenames coming from Windows users
   Lowercase filenames
   #+BEGIN_SRC sh
   for i in *; do mv $i `echo $i | tr [:upper:] [:lower:]`; done
   #+END_SRC

   Replace blanks in filenames with _
   #+BEGIN_SRC sh
   for i in *; do mv "${i}" `echo ${i} | sed 's/ /_/g'`; done
   #+END_SRC

** Screen

*** Howto install screen on Oracle Linux 6.X
    1) Download final package sources from here: http://ftp.gnu.org/gnu/screen/
    2) Install required packages
       #+BEGIN_SRC sh
       yum remove screen # remove the preinstalled screen version
       yum install ncurses-devel # fixes the termcap error you might get
       yum install gcc # fixes a whole bunch of requirement errors
       #+END_SRC

** Show all processes that run under a certain user
   #+BEGIN_SRC sh
   ps -ef | grep certain_user
   #+END_SRC

** Unpack a .tar.gz file
   #+BEGIN_SRC sh
   tar -xzf datei.tar.gz
   #+END_SRC
   - -x extract
   - -f file to be unpacked
   - -z first gzip, then tar

* Debugging tools
  http://brendangregg.com/ebpf.html

** Commands helpful for performance analysis
   Using the terminal:
   #+BEGIN_SRC sh
df -h #check if disk-space is available
df -i #show inodes as additional information
free -mh #show RAM and swap
lscpu  # Show CPU information (number of cores, etc.)
mytop -u root --prompt # current mysql performance, inklusive Sessions:
vmstat 2 10 # Gives hints about CPU and memory during execution of performance-impaired process
iostat -xk 2 12 # Gives hints about I/O during execution of performance-impaired process
cat /proc/meminfo # Infos about processes in general
htop # Which processes take the most storage? Careful, green means actual space, yellow means provisioned
   #+END_SRC

   Using vSphere:
   - Check the VMs "Perfomance"-Tab, the CPU and RAM specifically
   - Check the Hypervisors "Performance"-Tab (sort by hosts and clusters)
   - Check the used Storages for Warnings

   A big tool which does it all (but may be complicated to use):
   #+BEGIN_SRC sh
sar
ksar # graphical interface
   #+END_SRC

** Debugging of Binaries
   To debug binaries that misbehave and dont give obvious logs try the following:
   - Look in the system messages log (/var/log/messages)
   - Use strace and look out for file permission errors which might cause the binary to stop
     #+BEGIN_SRC sh
     strace -pid <PID> -f
     #+END_SRC
   - Debug the binary with gdb (u are going pretty deep in here)

** Monitor a process that times out
   #+BEGIN_SRC sh
   strace -f pid-file (child-threads followen) (not confirmed)
   #+END_SRC
   Short of that, you can always look in the process init script. For instance, the SSH daemon is
   started with the script in /etc/init.d/sshd. Sometimes the PID will be defined there (search
   for pid, PID, PIDFILE, PID_FILE, etc.).  For anything that sources /etc/init.d/functions, the
   PID will live in /var/run/*.pid.
